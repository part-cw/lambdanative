(cond-expand
 (gambit-c
  (begin
    (define-macro (iota count)
      `(let loop ((i ,count) (result '()))
         (if (##fx> i 0)
             (let ((i (##fx- i 1)))
               (loop i (##cons i result)))
             result)))
    (define-macro (take x i)
      `(let loop ((probe ,x)
                  (j ,i)
                  (rev-result '()))
         (if (##fx> j 0)
             (loop (if (pair? probe) (##cdr probe) (error "take: short list" ,x ,i))
                   (##fx- j 1)
                   (##cons (##car probe) rev-result))
             (reverse rev-result)))))
  (define-macro (drop x i)
    `(let loop ((probe ,x)
                (j ,i))
       (if (##fx> j 0)
           (loop (if (pair? probe) (##cdr probe) (error "drop: short list" ,x ,i))
                 (##fx- j 1))
           probe)))
  ) (else))
