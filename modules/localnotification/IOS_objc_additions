// Apple Local Notifications
char localnotification_msg[100];
int localnotification_gotmsg=0;
double localnotification_timestamp;
extern void ios_localnotification_renumber();
UILocalNotification* ios_localnotification_create(char* text, double time, int repeatmin, int localnotification_id, char* soundfile);

extern int ios_localnotification_schedule(char* text, double time, int repeatmin, char* soundfile) {
  // Update unique ids
  NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
  int localnotification_id = [userDefaults integerForKey:@"LocalNotificationId"];
  if (localnotification_id==0){
    localnotification_id++;
  }
  // Make event
  UILocalNotification* localNotification = ios_localnotification_create(text, time, repeatmin, localnotification_id, soundfile);
  // Update ids
  localnotification_id++;
  [userDefaults setInteger: localnotification_id forKey:@"LocalNotificationId"];
  [userDefaults synchronize];
  // Schedule the notifications
  [[UIApplication sharedApplication] scheduleLocalNotification: localNotification];
  return localnotification_id-1;
}

extern int ios_localnotification_schedule_batch(char* text[], double* time, int* repeatmin, char* sounds[], int len, int* localnotification_ids){
  NSMutableArray *eventArray = [[NSMutableArray alloc] init];
  // Update unique ids
  NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
  int localnotification_id = [userDefaults integerForKey:@"LocalNotificationId"];
  if (localnotification_id==0){
    localnotification_id++;
  }
  // Make all the events
  int i;
  for (i=0;i<len;i++){
    if (time[i]==0){
      continue;
    }
    UILocalNotification* localNotification = ios_localnotification_create(text[i], time[i], repeatmin[i], localnotification_id, sounds[i]);
    [eventArray addObject: localNotification];

    // Hack as Apple won't support sensible intervals
    if (repeatmin[i] > 1){
      int dt;
      if (repeatmin[i] > 1 && repeatmin[i] < 60){
        localNotification.repeatInterval =  NSHourCalendarUnit;
        for (dt=repeatmin[i];dt<60;dt+=repeatmin[i]){
          localNotification.fireDate = [NSDate dateWithTimeIntervalSince1970: (time[i] + 60*dt)];
          [eventArray addObject: localNotification];
        }
      }else if (repeatmin[i] > 60 && repeatmin[i] < 1440){
        localNotification.repeatInterval =  NSDayCalendarUnit;
        for (dt=repeatmin[i];dt<1440;dt+=repeatmin[i]){
          localNotification.fireDate = [NSDate dateWithTimeIntervalSince1970: (time[i] + 60*dt)];
          [eventArray addObject: localNotification];
        }
      }
    }
    // Keep track of ids
    localnotification_ids[i]=localnotification_id++;
  }
  [userDefaults setInteger: localnotification_id forKey:@"LocalNotificationId"];
  [userDefaults synchronize];
  // Add old notifications back in
  NSArray *eventArrayOld = [[UIApplication sharedApplication] scheduledLocalNotifications];
  [eventArray addObjectsFromArray: eventArrayOld];
  // Schedule the notifications
  [[UIApplication sharedApplication] setScheduledLocalNotifications: eventArray];
  return len;
}

UILocalNotification* ios_localnotification_create(char* text, double time, int repeatmin, int localnotification_id, char* soundfile){
  UILocalNotification* localNotification = [[UILocalNotification alloc] init];
  localNotification.timeZone = [NSTimeZone localTimeZone];
  localNotification.fireDate = [NSDate dateWithTimeIntervalSince1970: time];
  localNotification.alertBody = [NSString stringWithUTF8String: text];
  // Every NSDayCalendarUnit repeating is easy
  if (repeatmin == 1){
    localNotification.repeatInterval =  NSMinuteCalendarUnit;
  }else if (repeatmin == 60){
    localNotification.repeatInterval =  NSHourCalendarUnit;
  }else if (repeatmin == 1440){
    localNotification.repeatInterval =  NSDayCalendarUnit;
  }
 // Add custom sound if requested
  if ((soundfile != NULL) && (soundfile[0] != '\0')){
    localNotification.soundName = [NSString stringWithUTF8String: soundfile];
  }else{
    localNotification.soundName = UILocalNotificationDefaultSoundName;
  }
  // No need to set localNotification.applicationIconBadgeNumber - rescheduler does it
  NSDictionary *infoDict = [NSDictionary dictionaryWithObject: [NSNumber numberWithInteger: localnotification_id]
    forKey: @"LocalNotificationId"];
  localNotification.userInfo = infoDict;
  return localNotification;
}

extern int ios_localnotification_cancelall() {
  [[UIApplication sharedApplication] cancelAllLocalNotifications];
  return 1;
}

extern int ios_localnotification_cancel(int id) {
  NSArray *eventArray = [[UIApplication sharedApplication] scheduledLocalNotifications];
  int matched = 0;
  for (int i=0; i<[eventArray count]; i++){
    UILocalNotification* localNotification = [eventArray objectAtIndex:i];
    NSInteger lid = [[localNotification.userInfo objectForKey: @"LocalNotificationId"] intValue];
    int localnotification_id = (int) lid;
    if (localnotification_id == id){
      [[UIApplication sharedApplication] cancelLocalNotification: localNotification];
      matched = 1;
    }
  }
  if (matched){
    return id;
  }else{
    return 0;
  }
}

// renumber methods as Apple doesn't do this automatically
extern void ios_localnotification_renumber() {
  NSArray *eventArray = [[UIApplication sharedApplication] scheduledLocalNotifications];
  int eventnum = [eventArray count];
  if (eventnum > 0){
    // Cancel all notifications
    // [[UIApplication sharedApplication] cancelAllLocalNotifications];
    // Reschedule
    int newnum = 1;
    for (UILocalNotification *notification in eventArray){
      notification.applicationIconBadgeNumber = newnum++;
    }
    [[UIApplication sharedApplication] setScheduledLocalNotifications: eventArray];
  }
}

// eof
