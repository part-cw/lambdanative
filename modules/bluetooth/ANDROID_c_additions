
struct ScanResult {
  char* mac_address;
  int rssi;
};

typedef struct ScanResult ScanResult;

static char** android_scanresults;
static int num_results;

void print_java(int line){
  JNIEnv *env = GetJNIEnv();
  jclass main_class = (*env)->FindClass(env, "@SYS_PACKAGE_SLASH@/@SYS_APPNAME@");
  if (env&&globalObj){
    jmethodID method = (*env)->GetMethodID(env, main_class, "printJava", "(I)V");
    (*env)->CallVoidMethod(env, globalObj, method, line);
  }
}

void free_scanresults(){
  for(int i = 0; i < num_results; i++)
    free(android_scanresults[i]);
  free(android_scanresults);
}

void Java_@SYS_PACKAGE_UNDERSCORE@_@SYS_APPNAME@_scanEvent(JNIEnv* env, jobject obj, jobject resultList) {

  print_java(29);

  // Get the class and method IDs for List and its methods
  jclass listClass = (*env)->FindClass(env, "java/util/List");
  jmethodID listGet = (*env)->GetMethodID(env, listClass, "get", "(I)Ljava/lang/Object;");
  jmethodID listSize = (*env)->GetMethodID(env, listClass, "size", "()I");

  print_java(36);

  // Get the class and method IDs for ScanResult
  jclass scanResultClass = (*env)->FindClass(env, "android/bluetooth/le/ScanResult");
  jclass btDeviceClass = (*env)->FindClass(env, "android/bluetooth/BluetoothDevice");
  jmethodID getDeviceMethod = (*env)->GetMethodID(env, scanResultClass, "getDevice", "()Landroid/bluetooth/BluetoothDevice;");
  jmethodID getAddressMethod = (*env)->GetMethodID(env, btDeviceClass, "getAddress", "()Ljava/lang/String;");

  print_java(44);

  // Get the class and method IDs for String
  jclass stringClass = (*env)->FindClass(env, "java/lang/String");
  jmethodID stringGetBytes = (*env)->GetMethodID(env, stringClass, "getBytes", "()[B");

  print_java(50);

  // Free the old results
  free_scanresults();

  // Get the input list size
  num_results = (*env)->CallIntMethod(env, resultList, listSize);

  print_java(58);

  // Allocate memory for the char** array
  android_scanresults = (char**)malloc(sizeof(char*) * (num_results + 1));

  // Iterate through the input list and convert strings
  for (int i = 0; i < num_results; i++) {
    jobject result = (*env)->CallObjectMethod(env, resultList, listGet, i);
    jobject device = (*env)->CallObjectMethod(env, result, getDeviceMethod);
    jstring address = (jstring)(*env)->CallObjectMethod(env, device, getAddressMethod);
    jbyteArray byteArray = (jbyteArray)(*env)->CallObjectMethod(env, address, stringGetBytes);
    jbyte* bytes = (*env)->GetByteArrayElements(env, byteArray, NULL);
    jsize length = (*env)->GetArrayLength(env, byteArray);

    // Allocate memory for the C string and copy the data
    android_scanresults[i] = (char*)malloc(length + 1);
    memcpy(android_scanresults[i], bytes, length);
    android_scanresults[i][length] = '\0';

    // Release local references and memory
    (*env)->ReleaseByteArrayElements(env, byteArray, bytes, JNI_ABORT);
    (*env)->DeleteLocalRef(env, byteArray);
    (*env)->DeleteLocalRef(env, address);
    (*env)->DeleteLocalRef(env, device);
    (*env)->DeleteLocalRef(env, result);
  }

  print_java(85);

  // Set last pointer to NULL
  android_scanresults[num_results] = NULL;
}

char** android_btle_startscan(){
  JNIEnv *env = GetJNIEnv();
  jclass main_class = (*env)->FindClass(env, "@SYS_PACKAGE_SLASH@/@SYS_APPNAME@");
  if (env&&globalObj){
    jmethodID method = (*env)->GetMethodID(env, main_class, "startScan", "()V");
    (*env)->CallVoidMethod(env, globalObj, method);
  }
}

char** android_btle_scanresults(){
  return android_scanresults;
}