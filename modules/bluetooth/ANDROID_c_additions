
typedef struct ScanResult {
  char mac_address[20];
  int rssi;
} ScanResult;

typedef struct DemoStruct {
  int x;
  int y;
  char* s;
} DemoStruct;

void scheme_release_ds(void* ds){
  DemoStruct* result = (DemoStruct*)ds;
  free(result->s);
}

DemoStruct* getDemoStruct(){
  DemoStruct* ds = malloc(sizeof(DemoStruct));
  ds->x = 2;
  ds->y = 3;
  ds->s = malloc(3 * sizeof(char));
  ds->s[0] = 'h';
  ds->s[1] = 'i';
  ds->s[2] = '\0';
  return ds;
}

DemoStruct** getDemoList(){
  DemoStruct** ds = malloc(3 * sizeof(DemoStruct*));
  ds[0] = getDemoStruct();
  ds[1] = getDemoStruct();
  ds[1]->x = 5;
  ds[2] = getDemoStruct();
  ds[2]->x = 7;
  return ds;
}

int getDemoX(DemoStruct* demo){
  return demo->x;
}

int getDemoXAt(DemoStruct** ds, int i){
  return getDemoX(ds[i]);
}

char* getDemoSAt(DemoStruct** ds, int i){
  return ds[i]->s;
}

#define MAX_NUM_RESULTS 100
ScanResult android_scanresults[MAX_NUM_RESULTS];
ScanResult scheme_scanresults[MAX_NUM_RESULTS];
int num_results = 0;

int eventBlock = 0;

void print_java(char* s, int i){
  JNIEnv *env = GetJNIEnv();
  jclass main_class = (*env)->FindClass(env, "@SYS_PACKAGE_SLASH@/@SYS_APPNAME@");
  if (env&&globalObj){
    jmethodID method = (*env)->GetMethodID(env, main_class, "printJava", "(Ljava/lang/String;I)V");
    jstring javaString = (*env)->NewStringUTF(env, s);
    (*env)->CallVoidMethod(env, globalObj, method, javaString, i);
  }
}

// void scheme_release_scanresult(void* result){
//   free_scanresult((ScanResult*)result);
// }

void free_scanresult(ScanResult result){
  free(result.mac_address);
}

void free_scanresults(){
  for(int i = 0; i < num_results; i++)
    free_scanresult(android_scanresults[i]);
  free(android_scanresults);
}

void Java_@SYS_PACKAGE_UNDERSCORE@_@SYS_APPNAME@_scanEvent(JNIEnv* env, jobject obj, jobject resultList) {

  // Make sure the result list is not actively being copied to return to Scheme
  if(eventBlock)
    return;

  // Get the class and method IDs for List and its methods
  jclass listClass = (*env)->FindClass(env, "java/util/List");
  jmethodID listGet = (*env)->GetMethodID(env, listClass, "get", "(I)Ljava/lang/Object;");
  jmethodID listSize = (*env)->GetMethodID(env, listClass, "size", "()I");

  // Get the class and method IDs for ScanResult
  jclass scanResultClass = (*env)->FindClass(env, "android/bluetooth/le/ScanResult");
  jmethodID getRssiMethod = (*env)->GetMethodID(env, scanResultClass, "getRssi", "()I");
  jclass btDeviceClass = (*env)->FindClass(env, "android/bluetooth/BluetoothDevice");
  jmethodID getDeviceMethod = (*env)->GetMethodID(env, scanResultClass, "getDevice", "()Landroid/bluetooth/BluetoothDevice;");
  jmethodID getAddressMethod = (*env)->GetMethodID(env, btDeviceClass, "getAddress", "()Ljava/lang/String;");

  // Free the old results
  // free_scanresults();

  // Get the input list size
  num_results = (*env)->CallIntMethod(env, resultList, listSize);

  // Iterate through the input list and convert strings
  for (int i = 0; i < num_results; i++) {
    jobject result = (*env)->CallObjectMethod(env, resultList, listGet, i);
    int rssi = (*env)->CallIntMethod(env, result, getRssiMethod);
    jobject device = (*env)->CallObjectMethod(env, result, getDeviceMethod);
    jstring jaddress = (jstring)(*env)->CallObjectMethod(env, device, getAddressMethod);
    char* address = (*env)->GetStringUTFChars(env, jaddress, 0);
    // print_java(address, rssi);

    // Assign the Scan Result
    android_scanresults[i].rssi = rssi;

    // Copy the mac address
    strcpy(android_scanresults[i].mac_address, address);

    // Release local references and memory
    (*env)->ReleaseStringUTFChars(env, jaddress, address);
    (*env)->DeleteLocalRef(env, jaddress);
    (*env)->DeleteLocalRef(env, device);
    (*env)->DeleteLocalRef(env, result);
  }
}

void android_btle_startscan(){
  JNIEnv *env = GetJNIEnv();
  jclass main_class = (*env)->FindClass(env, "@SYS_PACKAGE_SLASH@/@SYS_APPNAME@");
  if (env&&globalObj){
    jmethodID method = (*env)->GetMethodID(env, main_class, "startScan", "()V");
    (*env)->CallVoidMethod(env, globalObj, method);
  }
}

void android_btle_stopscan(){
  JNIEnv *env = GetJNIEnv();
  jclass main_class = (*env)->FindClass(env, "@SYS_PACKAGE_SLASH@/@SYS_APPNAME@");
  if (env&&globalObj){
    jmethodID method = (*env)->GetMethodID(env, main_class, "stopScan", "()V");
    (*env)->CallVoidMethod(env, globalObj, method);
  }
}

ScanResult* android_get_scanresults(){
  print_java("CURRENT RESULTS", num_results);
  for(int i = 0; i < num_results; i++){
    print_java(android_scanresults[i].mac_address, android_scanresults[i].rssi);
    // Copy from the internal array of scan results to the external array
    scheme_scanresults[i].rssi = android_scanresults[i].rssi;
    strcpy(scheme_scanresults[i].mac_address, android_scanresults[i].mac_address);
  }
  eventBlock = 0;
  return scheme_scanresults;
}

int android_get_numresults(){
  eventBlock = 1;
  return num_results;
}

ScanResult btle_scanresults_ref(ScanResult* results, int i){
  print_java("RESULT", i);
  print_java(results[i].mac_address, results[i].rssi);
  return results[i];
}

char* btle_get_macaddress(ScanResult result){
  print_java(result.mac_address, 0);
  return result.mac_address;
}
int btle_get_rssi(ScanResult result){
  print_java(result.mac_address, result.rssi);
  return result.rssi;
}
