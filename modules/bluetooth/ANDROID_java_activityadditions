
native void scanEvent(String resultStr);

private ScanCallback scanCallback;

public void startScan(){
  List<ScanResult> scanResults = new ArrayList<>();

  scanCallback = new ScanCallback() {
    @Override
    public void onScanResult(int callbackType, ScanResult result) {
      super.onScanResult(callbackType, result);
      String macAddress = result.getDevice().getAddress();
      int rssi = result.getRssi();
      // Do a little filtering on signal strength
      if(rssi < -70)
        return;
      // Check if a result with the same macAddress already exists
      boolean found = false;
      for (int i = 0; i < scanResults.size(); i++) {
        ScanResult existingResult = scanResults.get(i);
        String existingMacAddress = existingResult.getDevice().getAddress();
        if (macAddress.equals(existingMacAddress)) {
          // Replace the existing result with the new one
          scanResults.set(i, result);
          found = true;
          break;
        }
      }
      // If not found, add the result to the list
      if (!found) {
        scanResults.add(result);
      }
      if(scanResults.size() > 64)
        scanResults.remove(0);
      scanEvent(resultListToString(scanResults));
    }
  };

  bluetoothLeScanner.startScan(scanCallback);
}

public void stopScan(){
    if(scanCallback != null){
        bluetoothLeScanner.stopScan(scanCallback);
        scanCallback = null;
    }
}

private static String resultListToString(List<ScanResult> resultList) {
  StringBuilder jsonBuilder = new StringBuilder();
  jsonBuilder.append("[");

  for (int i = 0; i < resultList.size(); i++) {
    ScanResult scanResult = resultList.get(i);

    jsonBuilder.append("{");
    jsonBuilder.append("\"macAddress\":\"").append(scanResult.getDevice().getAddress()).append("\",");
    jsonBuilder.append("\"rssi\":").append(scanResult.getRssi());
    jsonBuilder.append("}");

    if (i < resultList.size() - 1) {
      jsonBuilder.append(",");
    }
  }

  jsonBuilder.append("]");

  return jsonBuilder.toString();
}
