class AudioHelper {
  final static String TAG = "@SYS_ORGTLD@.@SYS_ORGSLD@.@SYS_LOCASEAPPNAME@";
  private static class MediaPlayerHelper {
    private static enum PlayState {
      STOPPED, PREPARED, PLAYING, LOOPING, PAUSED;
    }
    private final MediaPlayer player;
    private PlayState playState;
    public MediaPlayerHelper(Context context, int resId){
      this.player = MediaPlayer.create(context, resId);
      this.playState = PlayState.PREPARED;
      MediaPlayer.OnCompletionListener listener = new MediaPlayer.OnCompletionListener(){
        @Override
        public void onCompletion(MediaPlayer mp){
          if(playState == PlayState.PLAYING){
            playState = PlayState.STOPPED;
            mp.stop();
          }
        }
      };
      this.player.setOnCompletionListener(listener);
    }
    public void release(){
      this.player.release();
    }
    public void start(float lv, float rv, int loop){
      if(this.playState == PlayState.STOPPED){
        try {
          this.player.prepare();
          this.playState = PlayState.PREPARED;
        } catch (IOException e) {
          Log.e(TAG,Log.getStackTraceString(e));
        }
      }
      this.player.setVolume(lv, rv);
      this.player.seekTo(0);
      if(loop != 0){
        this.player.setLooping(true);
        this.playState = PlayState.LOOPING;
      } else {
        this.player.setLooping(false);
        this.playState = PlayState.PLAYING;
      }
      this.player.start();
    }
    public void stop(){
      this.playState = PlayState.STOPPED;
      this.player.stop();
    }
    public void pause(){
      if(this.playState == PlayState.PLAYING || this.playState == PlayState.LOOPING){
        this.player.pause();
        this.playState = PlayState.PAUSED;
      }
    }
    public void resume(){
      if(this.playState == PlayState.PAUSED){
        this.player.start();
        if(this.player.isLooping()){
          this.playState = PlayState.LOOPING;
        } else {
          this.playState = PlayState.PLAYING;
        }
      }
    }
  }
  private static String ResourceLocation = "@SYS_ORGTLD@.@SYS_ORGSLD@.@SYS_LOCASEAPPNAME@:raw/";
  private Context context = null;
  private static AudioHelper instance = null;
  private MediaPlayer mediaPlayer = null;
  private List<MediaPlayerHelper> mediaPlayers = null;
  private AudioManager audioManager = null;
  private AudioHelper(){  
  }
  void Initialise(){      
    mediaPlayers = new ArrayList<MediaPlayerHelper>();
  } 
  public void finalize(){   
    for(MediaPlayerHelper mp : mediaPlayers){
      if(mp!=null){
        mp.release();
      }
    }
  }
  public void setContext(Context context, MediaPlayer mediaPlayer){
    this.context = context;
    this.audioManager = (AudioManager) context.getSystemService(Activity.AUDIO_SERVICE);
    this.mediaPlayer = mediaPlayer; 
  }
  public static AudioHelper getInstance(){
    if (instance == null){
      instance = new AudioHelper();
      instance.Initialise();        
    }
    return instance;
  }
  public int LoadSound(String filename, int Priority) {
    String s = ResourceLocation + filename;
    int resID = context.getResources().getIdentifier(s, null, null);
    Log.d(TAG,"Entered load sound method.");
    if (resID == 0) {
      Log.e(TAG,"Failed to load sound resource=" + s);
      return 0;
    }
    MediaPlayerHelper localMediaPlayer = new MediaPlayerHelper(context, resID);
    mediaPlayers.add(localMediaPlayer);
    return mediaPlayers.size();
  } 
  public int PlaySound(int SoundID, float lv, float rv, int priority, int loop, float rate) {
    MediaPlayerHelper localMediaPlayer = mediaPlayers.get(SoundID-1);
    if(localMediaPlayer!=null){
      localMediaPlayer.start(lv, rv, loop);
    }
    return SoundID;
  }
  public int StopSound(int SoundID) {
    MediaPlayerHelper localMediaPlayer = mediaPlayers.get(SoundID-1);
    if(localMediaPlayer!=null){
      localMediaPlayer.stop();
    }
    return SoundID;
  }
  public int StopAll() {
    int ct=0;
    for(MediaPlayerHelper player : this.mediaPlayers){
      if(player!=null){
        player.stop();
        ct++;
      }
    }
    return ct;
  }
  public boolean UnloadSound(int SoundID) {
    // We null out removed sounds - we have to null check sounds
    // later but this simplifies the representation of sounds by
    // their offset index.
    MediaPlayerHelper toRemove = mediaPlayers.get(SoundID-1);
    toRemove.release();
    mediaPlayers.set(SoundID-1,null);
    return true;
  }
  public void onPause(){
    for(MediaPlayerHelper player : this.mediaPlayers){
      if(player!=null){
        player.pause();
      }
    }
  }
  public void onResume(){
    for(MediaPlayerHelper player : this.mediaPlayers){
      if(player!=null){
        player.resume();
      }
    }
  }
  public boolean SetVolume(float volume){
    float systemMaxVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
    float systemVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC)/systemMaxVolume;
    if (Math.abs(systemVolume-volume)*100 >= 1) {
      float playerVolume = volume/systemVolume;
      this.mediaPlayer.setVolume(playerVolume,playerVolume);
    }
    return true;
  }
}
// eof AudioHelper 
