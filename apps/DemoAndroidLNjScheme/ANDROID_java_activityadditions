/* -*-java-*- */

/* # Helper methods */

/* LNjScheme_Set_OnClickListener: register a LNjScheme lambda to be called when the View is clicked.
 *
 * LNjScheme can not (yet) declare annonymous derived classes.  (Or at
 * least I don't know how that could be done.)
 *
 * For the time being we get along with a little Java.
 */
private android.view.View.OnClickListener LNjScheme_OnClickListener(final Object proc) {
    return new android.view.View.OnClickListener() {
        public void onClick(android.view.View v) {
            LNjSchemeEvaluate(new LNjScheme.Pair(proc, new LNjScheme.Pair(v, null)));
        }
    };
}
public void LNjScheme_Set_OnClickListener(android.view.View v, Object expr) {
    v.setOnClickListener(LNjScheme_OnClickListener(expr));
}

/* LNtriggerRedraw: trigger a redraw for the LN app.
 *
 * TBD: Get rid of this method entirely.
 */
public void LNtriggerRedraw() {
    // Likely there is a better way to achieve this.  I don't know
    // how.  Note: calling mGLView.onPause causes issues without an
    // override of ln_core's `(terminate)`.
    mGLView.onPause();
    mGLView.onResume();
}

/* LNmGLView:  find the original, backward compatible View */
public GLSurfaceView LNmGLView() {return mGLView;} // FIXME implement field accessors instead!

private static Object LNjScheme_this = null; // The instance of the app.
public static @SYS_PACKAGE_DOT@.@SYS_APPNAME@ me() {return (@SYS_PACKAGE_DOT@.@SYS_APPNAME@) LNjScheme_this;}

/* # LNjScheme core */

private static LNjScheme.Scheme LNjSchemeSession = new LNjScheme.Scheme(new String[0]);

public Object LNjSchemeEvaluate(Object expr) {
    // sync with the one and only evaluator supported so far.
    if(LNjSchemeSession != null) {
        synchronized(LNjSchemeSession) {
            LNjScheme_this = this; // TBD: It should be enough to initialize this once.
            return LNjSchemeSession.eval(expr);
        }
    } else return null;
}

/* jschemeCall: evaluate `msg` in any Java thread and return result
 *
 * FIXME TBD CHECK: This was the initial implementation, but might be broken now.
 */
public String jschemeCall(String msg) {
    // BEWARE: Operations not safe to be called asynchronously from
    // any thread, not safe to be called from various contexts (e.g.,
    // within "onDrawFrame" which amounts to "while reacting to
    // EVENT_REDRAW"), etc. MAY HANG here.
    //
    // If you need fast execution and know the call is safe use this
    // one.  Otherwise use the two-phased version using
    // `LNjSchemeSend` followed by a `LNjSchemeResult to dispatch the
    // evaluation to `runOnUiThread` and wait for it to be eventually
    // evaluated in a more-or-less safe context.
    try {
        LNjScheme.InputPort in = new LNjScheme.InputPort(new java.io.ByteArrayInputStream(msg.getBytes(java.nio.charset.Charset.forName("UTF-8"))));
        Object expr = in.read();
        if(in.isEOF(expr)) return "E\n\"invalid input\"";
        Object result = LNjSchemeEvaluate(expr);
        java.io.StringWriter buf = new java.io.StringWriter();
        java.io.PrintWriter port = new java.io.PrintWriter(buf);
        port.println("D");
        LNjScheme.SchemeUtils.write(result, port, true);
        return buf.toString();
    } catch (Exception e) {
        java.io.StringWriter buf = new java.io.StringWriter();
        java.io.PrintWriter port = new java.io.PrintWriter(buf);
        port.println("E");
        LNjScheme.SchemeUtils.write(("" + e).toCharArray(), port, true);
        return buf.toString();
    }
}

/* LNjSchemeSend: send string for evaluation to Java app main thread.
 *
 * LNjSchemeResult: receive evaluation result from Java app main thread.
 */

private java.util.concurrent.FutureTask<Object> LNjSchemeJob = null;

public void LNjSchemeSend(String msg) {
    final LNjScheme.InputPort in = new LNjScheme.InputPort(new java.io.ByteArrayInputStream(msg.getBytes(java.nio.charset.Charset.forName("UTF-8"))));
    final Object expr = in.read();
    // Object result = LNjSchemeEvaluate(expr);
    java.util.concurrent.FutureTask<Object> job = new java.util.concurrent.FutureTask<Object>
        (new java.util.concurrent.Callable<Object>() {
                @Override
                public Object call() throws Exception {
                    // ln_log("invocation of " + this + " evaluating.");
                    if(in.isEOF(expr)) throw new Exception("invalid input");
                    return LNjSchemeEvaluate(expr); }
            });
    // ln_log("Sending to UI: " + job + " for: " + expr);
    LNjSchemeJob = job;
    new Thread() {
        @Override
        public void run() {
            // ln_log("LNjScheme waiting for completion");
            try {
                LNjSchemeJob.get();
            } catch (Exception e) { // InterruptedException java.util.concurrent.ExecutionException
                // FIXME: Do something sensible here!
            }
            // ln_log("LNjScheme notifying result");
            nativeEvent(126,0,0);
        }
    }.start();
    runOnUiThread(job);
}

public String LNjSchemeResult() {
    try {
        Object result = LNjSchemeJob != null ? LNjSchemeJob.get() : null;
        LNjSchemeJob = null;
        // ln_log("got result from UI");
        java.io.StringWriter buf = new java.io.StringWriter();
        java.io.PrintWriter port = new java.io.PrintWriter(buf);
        port.println("D");
        LNjScheme.SchemeUtils.write(result, port, true);
        return buf.toString();
    } catch (java.util.concurrent.ExecutionException e) {
        // ln_log("got error from call");
        java.io.StringWriter buf = new java.io.StringWriter();
        java.io.PrintWriter port = new java.io.PrintWriter(buf);
        port.println("E");
        LNjScheme.SchemeUtils.write(("" + e.getCause()).toCharArray(), port, true);
        return buf.toString();
    } catch (Exception e) {
        // ln_log("got exception from call");
        java.io.StringWriter buf = new java.io.StringWriter();
        java.io.PrintWriter port = new java.io.PrintWriter(buf);
        port.println("E");
        LNjScheme.SchemeUtils.write(("LNjScheme unexpected exception: " + e).toCharArray(), port, true);
        return buf.toString();
    }
}
